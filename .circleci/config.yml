version: 2.1

workflows: 
  code-commit:
    jobs:
      - black-python-code-formatter:
          context: org-sightmachine
      - mypy-type-checks:
          context: org-sightmachine
      - run-unit-tests:
          context: org-sightmachine
      - cve-repo-scan:
          context: org-sightmachine
  nightly-cve:
    triggers:
      - schedule:
          # Should run around 6/7pm Pacific time
          cron: "00 2 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - cve-image-scan:
          context: org-sightmachine

orbs:
  gcp-gke: circleci/gcp-gke@0.2.0
  python: circleci/python@2.1.1
  gcp-cli: circleci/gcp-cli@3.1.1
  slack: circleci/slack@4.13.1
  codecov: codecov/codecov@4.0.1
  sm-build: sightmachine/ci-orb-sm-build@0.1.0

commands:
  disable_build_if_not_pr:
    description: "Stop the current build if not in a PR context."
    steps:
      - run:
          name: Abort if not building a pull request
          command: |
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              circleci-agent step halt
            fi

  merge-pr-branch:
    steps:
      # Make sure that PR merges can never be considered releases.
      - run:
          name: PR Merges should never be considered releases
          command: echo 'unset CIRCLE_TAG' >> $BASH_ENV
      - sm-build/jq_install
      - run:
          name: Get PR base branch.
          command: |
            echo $"export CIRCLE_TARGET_BRANCH=\"$(curl -s -u ops:${GITHUB_PERSONAL_ACCESS_TOKEN} https://api.github.com/repos/sightmachine/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PULL_REQUEST##*/} | jq --raw-output '.base.ref')\"" >> $BASH_ENV
            source $BASH_ENV
            echo "Github target branch: $CIRCLE_TARGET_BRANCH"
      - run:
          name: Merge with the base branch.
          command: |
            git --version
            git config --global user.email 'ops@sightmachine.com'
            git config --global user.name 'circleci'
            git merge -m "Prospective PR merge" origin/$CIRCLE_TARGET_BRANCH

  send_slack_msg_on_fail:
    description: "If the job fails for the master branch, send a message to the Slack channel."
    steps:
      - slack/notify:
          event: fail
          channel: monitoring-sdk
          # branch_pattern: master
          custom: |
            {
              "text": "Uh-oh! *$CIRCLE_PROJECT_REPONAME* (master) - Job Failed <$CIRCLE_BUILD_URL|#$CIRCLE_BUILD_NUM>",
              "blocks": [
                {
                  "text": {
                    "text": "Uh-oh! *${CIRCLE_PROJECT_REPONAME}* (master) - Job Failed [#${CIRCLE_BUILD_NUM}]($CIRCLE_BUILD_URL)",
                    "type": "mrkdwn"
                  },
                  "type": "header"
                },
                {
                  "elements": [
                    {
                      "action_id": "basic_fail_view",
                      "text": {
                        "text": "View Job",
                        "type": "plain_text"
                      },
                      "type": "button",
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ],
                  "type": "actions"
                }
              ]
            }


jobs:
  ## ------------------ Run Unit Tests ------------------

  run-unit-tests:
    # Use VM over docker container
    docker:
      - image: cimg/python:3.11.0
    steps:
      # Make sure that the build doesn't accidentally pull images from Docker Hub.
      # Pulls from Docker Hub may fail due to rate-limiting after Nov 1 2020.
      - sm-build/disable_docker_hub_access
      - sm-build/configure_gcr_docker_access
      - attach_workspace:
          at: /tmp/workspace

      # - configure_environment
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run Unit Tests
          command: |
            set -x
            pip install -r requirements-codecoverage.txt
            pip install .
            mkdir test-results
            coverage run -m pytest -vvv --nbmake --nbmake-timeout=300 -n=auto --junitxml=test-results/junit.xml tests
      - run:
          name: Compile Coverage Report
          command: |
            coverage html -d htmlcov
            codecov --required

      # Store the test results on each node so we can see failures
      - store_test_results:
          path: test-results
      
      - store_artifacts:
          name: Save Unit Test Results
          path: htmlcov

      - send_slack_msg_on_fail    

  ## ------------------ Check Black python code formate ------------------
  black-python-code-formatter:
    parameters:
      with_merge: # Part of the PR-merge workflow
        type: boolean
        default: false
    docker:
      # https://circleci.com/developer/images/image/cimg/python
      - image: cimg/python:3.11.0
    steps:
      - when:
          condition: << parameters.with_merge >>
          steps:
            - disable_build_if_not_pr
      - checkout
      - run:
          name: Run black code formatter check
          command: |
            set -x
            pip install -r ./requirements-black.txt
            black --check .
            if [ $? -ne 0 ]; then
              echo "Unformatted code detected. Please run black --fast . locally and commit to format your code." >&2
              exit 1
            fi

  ## ------------------ Check python code against known security issues ------------------
  cve-repo-scan:
    parameters:
      with_merge: # Part of the PR-merge workflow
        type: boolean
        default: false
    docker:
      # https://circleci.com/developer/images/image/cimg/python
      - image: cimg/base:current
    steps:
      - when:
          condition: << parameters.with_merge >>
          steps:
            - disable_build_if_not_pr
      - checkout
      - when:
          condition: << parameters.with_merge >>
          steps:
            - merge-pr-branch
      - sm-build/trivy_scan_filesystem:
          report_json_name: fs_report.json
          report_html_name: fs_report.html
      - store_artifacts:
          name: Save Filesystem Report
          path: fs_report.html

  ## ------------- Check python code and container image against known security issues -----------
  cve-image-scan:
    docker:
      # https://circleci.com/developer/images/image/cimg/python
      - image: cimg/base:current
    steps:
      # Checkout the code from the master branch
      - checkout
      # Perform the security scan on the filesystem
      - sm-build/trivy_scan_filesystem:
          report_json_name: fs_report_master.json
          report_html_name: fs_report_master.html
      # Store the artifacts for the master branch scan
      - store_artifacts:
          name: Save Master Branch Filesystem Report
          path: fs_report_master.html
      # The following will mark the build as failed if there are issues in the report.
      - sm-build/trivy_notify_on_issues:
          slack_channel: monitoring-sdk
          slack_branch_pattern: master
          report_list: Repo|fs_report_master.json|fs_report_master.html

  ## ------------------ Mypy for Static Type Checking python code ------------------
  mypy-type-checks:
    parameters:
      with_merge: # Part of the PR-merge workflow
        type: boolean
        default: false
    docker:
      # https://circleci.com/developer/images/image/cimg/python
      - image: cimg/python:3.11.0
    steps:
      - when:
          condition: << parameters.with_merge >>
          steps:
            - disable_build_if_not_pr
      - checkout
      # Run Pyre type checking
      - run:
          name: Run Static type checking
          command: |
            set -x
            # Install Python packages for type checking
            pip wheel --wheel-dir=./wheel-dir -r requirements-type-checks.txt
            pip install --find-links=./wheel-dir -r requirements-type-checks.txt
            # Using 'git diff ...' to fetch newly added Python files from the repo
            # Conducting static type checking on the files obtained
            # Re-running static type checking on the files listed in 'mypy.ini'
            mypy $(git diff --name-only --diff-filter=A origin/master HEAD | grep '\.py$') && mypy
            if [ $? -ne 0 ]; then
                echo "MyPy finds static type error(s) in the Python codebase. Please fix all type-related errors before committing the code." >&2
                exit 1
            fi
      # Store MyPy type checking results
      - store_test_results:
          path: mypy-results
      # Store MyPy type checking artifacts (e.g., HTML reports)
      - store_artifacts:
          name: MyPy Artifacts
          path: mypy-results/mypy-html
