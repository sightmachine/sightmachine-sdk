version: 2.1

workflows: 
  code-commit:
    jobs:
      - black-python-code-formatter:
          context: org-sightmachine
      - run-unit-tests:
          context: org-sightmachine
      - code-coverage-report:
          context: org-sightmachine

orbs:
  gcp-gke: circleci/gcp-gke@0.2.0
  python: circleci/python@2.1.1

commands:
  disable_docker_hub:
    description: "Disable Docker Hub access for running container/VM."
    steps:
      - run:
          name: Disable Docker Hub
          command: |
            mkdir -p ~/.docker/
            echo '{"auths":{"https://index.docker.io/v1/":{"auth":"YTpiYWQK"}}}' > ~/.docker/config.json
  disable_build_if_not_pr:
    description: "Stop the current build if not in a PR context."
    steps:
      - run:
          name: Abort if not building a pull request
          command: |
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              circleci-agent step halt
            fi


jobs:
  ## ------------------ Run Unit Tests ------------------

  run-unit-tests:
    # Use VM over docker container
    machine:
      # # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      # image: ubuntu-2204:2022.07.1
    docker:
      - image: cimg/python:3.11.0
    steps:
      # Make sure that the build doesn't accidentally pull images from Docker Hub.
      # Pulls from Docker Hub may fail due to rate-limiting after Nov 1 2020.
      - disable_docker_hub
      - attach_workspace:
          at: /tmp/workspace

      # - configure_environment
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run Unit Tests
          command: |
            mkdir test-results
            coverage run -m pytest --junitxml=test-results/junit.xml tests
            coverage report
            coverage html

      # Store the test results on each node so we can see failures
      - store_test_results:
          path: test-results
      
      - store_artifacts:
          name: Save Unit Test Results
          path: htmlcov

  ## ------------------ Check Black python code formate ------------------
  black-python-code-formatter:
    parameters:
      with_merge: # Part of the PR-merge workflow
        type: boolean
        default: false
    docker:
      # https://circleci.com/developer/images/image/cimg/python
      - image: cimg/python:3.11.0
    steps:
      - when:
          condition: << parameters.with_merge >>
          steps:
            - disable_build_if_not_pr
      - checkout
      - run:
          name: Run black code formatter check
          command: |
            set -x
            pip install -r ./requirements-black.txt
            black --check .
            if [ $? -ne 0 ]; then
              echo "Unformatted code detected. Please run black --fast . locally and commit to format your code." >&2
              exit 1
            fi

  ## ------------------ Generate Code Coverage Report ------------------

  code-coverage-report:
    parameters:
      with_merge: # Part of the PR-merge workflow
        type: boolean
        default: false
    docker:
      # https://circleci.com/developer/images/image/cimg/python
      - image: cimg/python:3.11.0
    steps:
      - when:
          condition: << parameters.with_merge >>
          steps:
            - disable_build_if_not_pr
      # Make sure that the build doesn't accidentally pull images from Docker Hub.
      # Pulls from Docker Hub may fail due to rate-limiting after Nov 1 2020.
      - disable_docker_hub
      # Coverage html requires source code to build HTML views
      - checkout
      # Need a workspace for all the coverage reports
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Compile Coverage Reports
          command: |
            set -x
            pip install -r requirements-coveralls.txt
            coverage html -d htmlcov
            coveralls
      - store_artifacts:
          name: Save Coverage Report
          path: htmlcov/